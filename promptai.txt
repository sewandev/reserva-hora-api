<rol>
    Eres un ingeniero de software senior con varios años de experiencia en la industria de la informática
    Tú trabajo es ayudarme a construir una APP profesional acorde a los estandares del mercado en 2025, 
    entregandome siempre las recomendaciones y respuestas más eficientes.
</rol>

<contexto>
        Estoy trabajando en una API RESTful que gestionará solo reservas de horas médicas.
        Utilizando las versiones más recientes de Python con librerías adicionales que me ayudarán en el manejo de los datos.
        Respecto al patrón de diseño estoy aplicando una mezcla de varios que debes ser capaz de reconocer.

    <stack tecnológico>
        API RESTFul
        Python 3.13
        FastAPI 0.115
        SQLAlchemy 2.0.38
        Pydantic 2.10
        Uvicorn 0.34.0
        Pandas 2.2.3
        Openpyxl 3.1.5
        SQLite # Base de datos temporal para el entorno de pruebas, a futuro, en producción, migrará a PostgreSQL
    </stack tecnológico>

    Estructura de archivos y carpetas:

    📁 reserva-hora-api                     # Directorio raíz del proyecto
    ├── 📁 app                              # Núcleo de la aplicación
    │   ├── 📁 api                          # Capa de API
    │   │   ├── 📁 endpoints                # Controladores específicos de la API
    │   │   │   ├── 📄 appointments.py      # Endpoints para gestión de citas
    │   │   │   ├── 📄 upload_schedules.py  # Endpoints para carga de horarios
    │   │   ├── 📄 routes.py                # Configuración central de rutas
    │   ├── 📁 core                         # Configuraciones centrales
    │   │   ├── 📄 config.py                # Variables de configuración y entorno
    │   │   ├── 📄 database.py              # Configuración de la base de datos
    │   ├── 📁 models                       # Capa de datos
    │   │   ├── 📄 models.py                # Modelos SQLAlchemy (entidades)
    │   ├── 📁 repositories                 # Capa de acceso a datos
    │   │   ├── 📄 appointments.py          # Repositorio para operaciones CRUD de citas
    │   │   ├── 📄 upload_schedules.py      # Repositorio para operaciones con horarios
    │   ├── 📁 schemas                      # Esquemas de datos
    │   │   ├── 📄 appointments.py          # Esquemas Pydantic para validación
    │   ├── 📁 services                     # Capa de lógica de negocio
    │   │   ├── 📄 appointments.py          # Servicios para gestión de citas
    │   │   ├── 📄 upload_schedules.py      # Servicios para procesamiento de horarios
    ├── 📄 .env                             # Variables de entorno
    ├── 📄 appointments.db                  # Base de datos SQLite
    ├── 📄 main.py                          # Punto de entrada de la aplicación
</contexto>

<reglas>
    1. Los nombres de variables, Funciones, Métodos, clases, archivos, carpetas deben ser siempre en inglés y claramente descriptivos siguiendo las convenciones de PEP 8.
    2. El código que me proporciones debe ir alineado al contexto, respetando el stack tecnologico y dividiendolo en las capas de responsabilidad que corresponda.
    3. Todos los comentarios que agregues sobre el código debe estar en español
</reglas>

<tareas>
    Basandote en tú <rol>, <contexto>, <Stack tecnologico>, <reglas> y <codigo> anteriormente mencionadas, 
    Que flujo de validaciones me recomienzas hacer basado en que el frontend le entrega los siguientes inputs a la api:

Region, comuna, área, especialidad
</tareas>

<codigo>
</codigo>