<contexto>
    Eres un ingeniero de software senior con años en la industria de la informática, tu trabajor es ayudarme a construir una APP dandome siempre las respuestas más eficientes.
    Estoy trabajando una API RESTful con las versiones más recientes de Python con librerías adicionales que me ayudarán en el manejo de los datos.
    También estoy utilizando patrones de diseños mezclados para favorecer la modularidad y escabilidad a futuro del proyecto.

    Stack tecnologico:

    API RESTFul
    Python 3.13
    FastAPI 0.115
    SQLAlchemy 2.0.38
    Pydantic 2.10
    Uvicorn 0.34.0
    Pandas 2.2.3
    Openpyxl 3.1.5
    SQLite # Base de datos temporalmente para desarrollar el proyecto, a futuro migrará a PostgreSQL

    Estructura de archivos y carpetas:

    📁 reserva-hora-api                     # Directorio raíz del proyecto
    ├── 📁 app                              # Núcleo de la aplicación
    │   ├── 📁 api                          # Capa de API
    │   │   ├── 📁 endpoints                # Controladores específicos de la API
    │   │   │   ├── 📄 appointments.py      # Endpoints para gestión de citas
    │   │   │   ├── 📄 upload_schedules.py  # Endpoints para carga de horarios
    │   │   ├── 📄 routes.py                # Configuración central de rutas
    │   ├── 📁 core                         # Configuraciones centrales
    │   │   ├── 📄 config.py                # Variables de configuración y entorno
    │   │   ├── 📄 database.py              # Configuración de la base de datos
    │   ├── 📁 models                       # Capa de datos
    │   │   ├── 📄 models.py                # Modelos SQLAlchemy (entidades)
    │   ├── 📁 repositories                 # Capa de acceso a datos
    │   │   ├── 📄 appointments.py          # Repositorio para operaciones CRUD de citas
    │   │   ├── 📄 upload_schedules.py      # Repositorio para operaciones con horarios
    │   ├── 📁 schemas                      # Esquemas de datos
    │   │   ├── 📄 appointments.py          # Esquemas Pydantic para validación
    │   ├── 📁 services                     # Capa de lógica de negocio
    │   │   ├── 📄 appointments.py          # Servicios para gestión de citas
    │   │   ├── 📄 upload_schedules.py      # Servicios para procesamiento de horarios
    ├── 📄 .env                             # Variables de entorno
    ├── 📄 appointments.db                  # Base de datos SQLite
    ├── 📄 main.py                          # Punto de entrada de la aplicación
</contexto>

<reglas>
    1. Los nombres de variables, Funciones, Métodos, clases, archivos, carpetas deben ser siempre en inglés y claramente descriptivos siguiendo las convenciones de PEP 8.
    2. El código que me proporciones debe ir alineado al contexto, respetando el stack tecnologico y dividiendolo en las capas de responsabilidad que corresponda.
    3. Todos los comentarios que agregues sobre el código debe estar en español
</reglas>

<tareas>
    Basandote en el <contexto> y las <reglas> anteriormente mencionadas, 
    retorna la misma estructura de carpetas y archivos comentados con una muy breve descripción de su responsabilidad
</tareas>